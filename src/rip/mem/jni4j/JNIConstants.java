package rip.mem.jni4j;

public abstract class JNIConstants {

	public static final int JNI_OK        = 0;
	public static final int JNI_ERR       = -1;
	public static final int JNI_EDETACHED = -2;
	public static final int JNI_EVERSION  = -3;
	public static final int JNI_ENOMEM    = -4;
	public static final int JNI_EEXIST    = -5;
	public static final int JNI_EINVAL    = -6;

	public static final int JNI_VERSION_1_1 = 0x00010001;
	public static final int JNI_VERSION_1_2 = 0x00010002;
	public static final int JNI_VERSION_1_4 = 0x00010004;
	public static final int JNI_VERSION_1_6 = 0x00010006;
	public static final int JNI_VERSION_1_8 = 0x00010008;
	public static final int JNI_VERSION_9   = 0x00090000;
	public static final int JNI_VERSION_10  = 0x000a0000;
	public static final int JNI_VERSION_19  = 0x00130000;
	public static final int JNI_VERSION_20  = 0x00140000;
	public static final int JNI_VERSION_21  = 0x00150000;
	
	public static final int JVMTI_VERSION_1   = 0x30010000;
	public static final int JVMTI_VERSION_1_0 = 0x30010000;
	public static final int JVMTI_VERSION_1_1 = 0x30010100;
	public static final int JVMTI_VERSION_1_2 = 0x30010200;
	public static final int JVMTI_VERSION_9   = 0x30090000;
	public static final int JVMTI_VERSION_11  = 0x300B0000;
	public static final int JVMTI_VERSION_19  = 0x30130000;
	public static final int JVMTI_VERSION_21  = 0x30150000;
	
	public static final int JNI_INVOKE_FUNCTION_COUNT = 7;
	public static final int JNI_INVOKE_FUNCTION_GETENV = 6;
	
	public static final int JNI_NATIVE_FUNCTION_COUNT = 235;
	public static final int JNI_NATIVE_FUNCTION_FINDCLASS = 6;
	public static final int JNI_NATIVE_FUNCTION_NEWGLOBALREF = 21;
	public static final int JNI_NATIVE_FUNCTION_DELETEGLOBALREF = 22;
	public static final int JNI_NATIVE_FUNCTION_GETMETHODID = 33;
	public static final int JNI_NATIVE_FUNCTION_CALLOBJECTMETHODA = 36;
	public static final int JNI_NATIVE_FUNCTION_GETSTATICMETHODID = 113;
	public static final int JNI_NATIVE_FUNCTION_CALLSTATICOBJECTMETHODA = 114;
	public static final int JNI_NATIVE_FUNCTION_NEWSTRINGUTF = 167;
	public static final int JNI_NATIVE_FUNCTION_REGISTERNATIVES = 215;
	
	public static final int JVMTI_FUNCTION_COUNT = 156;
	public static final int JVMTI_FUNCTION_SUSPENDTHREAD = 4;
	public static final int JVMTI_FUNCTION_RESUMETHREAD = 5;
	public static final int JVMTI_FUNCTION_STOPTHREAD = 6;
	public static final int JVMTI_FUNCTION_GETCAPABILITIES = 88;
	public static final int JVMTI_FUNCTION_GETPOTENTIALCAPABILITIES = 139;
	public static final int JVMTI_FUNCTION_ADDCAPABILITIES = 141;
	public static final int JVMTI_FUNCTION_RELINQUISHCAPABILITIES = 142;

	public static final int JVMTI_ERROR_NONE = 0;
	public static final int JVMTI_ERROR_INVALID_THREAD = 10;
	public static final int JVMTI_ERROR_INVALID_THREAD_GROUP = 11;
	public static final int JVMTI_ERROR_INVALID_PRIORITY = 12;
	public static final int JVMTI_ERROR_THREAD_NOT_SUSPENDED = 13;
	public static final int JVMTI_ERROR_THREAD_SUSPENDED = 14;
	public static final int JVMTI_ERROR_THREAD_NOT_ALIVE = 15;
	public static final int JVMTI_ERROR_INVALID_OBJECT = 20;
	public static final int JVMTI_ERROR_INVALID_CLASS = 21;
	public static final int JVMTI_ERROR_CLASS_NOT_PREPARED = 22;
	public static final int JVMTI_ERROR_INVALID_METHODID = 23;
	public static final int JVMTI_ERROR_INVALID_LOCATION = 24;
	public static final int JVMTI_ERROR_INVALID_FIELDID = 25;
	public static final int JVMTI_ERROR_INVALID_MODULE = 26;
	public static final int JVMTI_ERROR_NO_MORE_FRAMES = 31;
	public static final int JVMTI_ERROR_OPAQUE_FRAME = 32;
	public static final int JVMTI_ERROR_TYPE_MISMATCH = 34;
	public static final int JVMTI_ERROR_INVALID_SLOT = 35;
	public static final int JVMTI_ERROR_DUPLICATE = 40;
	public static final int JVMTI_ERROR_NOT_FOUND = 41;
	public static final int JVMTI_ERROR_INVALID_MONITOR = 50;
	public static final int JVMTI_ERROR_NOT_MONITOR_OWNER = 51;
	public static final int JVMTI_ERROR_INTERRUPT = 52;
	public static final int JVMTI_ERROR_INVALID_CLASS_FORMAT = 60;
	public static final int JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION = 61;
	public static final int JVMTI_ERROR_FAILS_VERIFICATION = 62;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED = 63;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED = 64;
	public static final int JVMTI_ERROR_INVALID_TYPESTATE = 65;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED = 66;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED = 67;
	public static final int JVMTI_ERROR_UNSUPPORTED_VERSION = 68;
	public static final int JVMTI_ERROR_NAMES_DONT_MATCH = 69;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED = 70;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED = 71;
	public static final int JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED = 72;
	public static final int JVMTI_ERROR_UNSUPPORTED_OPERATION = 73;
	public static final int JVMTI_ERROR_UNMODIFIABLE_CLASS = 79;
	public static final int JVMTI_ERROR_UNMODIFIABLE_MODULE = 80;
	public static final int JVMTI_ERROR_NOT_AVAILABLE = 98;
	public static final int JVMTI_ERROR_MUST_POSSESS_CAPABILITY = 99;
	public static final int JVMTI_ERROR_NULL_POINTER = 100;
	public static final int JVMTI_ERROR_ABSENT_INFORMATION = 101;
	public static final int JVMTI_ERROR_INVALID_EVENT_TYPE = 102;
	public static final int JVMTI_ERROR_ILLEGAL_ARGUMENT = 103;
	public static final int JVMTI_ERROR_NATIVE_METHOD = 104;
	public static final int JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED = 106;
	public static final int JVMTI_ERROR_OUT_OF_MEMORY = 110;
	public static final int JVMTI_ERROR_ACCESS_DENIED = 111;
	public static final int JVMTI_ERROR_WRONG_PHASE = 112;
	public static final int JVMTI_ERROR_INTERNAL = 113;
	public static final int JVMTI_ERROR_UNATTACHED_THREAD = 115;
	public static final int JVMTI_ERROR_INVALID_ENVIRONMENT = 116;
	
	public static final int JVMTI_VERSION_INTERFACE_JNI   = 0x00000000;
	public static final int JVMTI_VERSION_INTERFACE_JVMTI = 0x30000000;
	
	public static final int JVMTI_VERSION_MASK_INTERFACE_TYPE = 0x70000000;
	public static final int JVMTI_VERSION_MASK_MAJOR          = 0x0FFF0000;
	public static final int JVMTI_VERSION_MASK_MINOR          = 0x0000FF00;
	public static final int JVMTI_VERSION_MASK_MICRO          = 0x000000FF;
	
	public static final int JVMTI_VERSION_SHIFT_MAJOR = 16;
	public static final int JVMTI_VERSION_SHIFT_MINOR = 8;
	public static final int JVMTI_VERSION_SHIFT_MICRO = 0;
	
	public static String getJNIErrorName(int errno) {
		return switch(errno) {
		case JNI_OK -> "JNI_OK";
		case JNI_ERR -> "JNI_ERR";
		case JNI_EDETACHED -> "JNI_EDETACHED";
		case JNI_EVERSION -> "JNI_EVERSION";
		case JNI_ENOMEM -> "JNI_ENOMEM";
		case JNI_EEXIST -> "JNI_EEXIST";
		case JNI_EINVAL -> "JNI_EINVAL";
		default -> "[UNKNOWN JNI ERROR]";
		};
	}
	
	public static String getJVMTIErrorName(int errno) {
		return switch(errno) {
		case JVMTI_ERROR_NONE -> "JVMTI_ERROR_NONE";
		case JVMTI_ERROR_INVALID_THREAD -> "JVMTI_ERROR_INVALID_THREAD";
		case JVMTI_ERROR_INVALID_THREAD_GROUP -> "JVMTI_ERROR_INVALID_THREAD_GROUP";
		case JVMTI_ERROR_INVALID_PRIORITY -> "JVMTI_ERROR_INVALID_PRIORITY";
		case JVMTI_ERROR_THREAD_NOT_SUSPENDED -> "JVMTI_ERROR_THREAD_NOT_SUSPENDED";
		case JVMTI_ERROR_THREAD_SUSPENDED -> "JVMTI_ERROR_THREAD_SUSPENDED";
		case JVMTI_ERROR_THREAD_NOT_ALIVE -> "JVMTI_ERROR_THREAD_NOT_ALIVE";
		case JVMTI_ERROR_INVALID_OBJECT -> "JVMTI_ERROR_INVALID_OBJECT";
		case JVMTI_ERROR_INVALID_CLASS -> "JVMTI_ERROR_INVALID_CLASS";
		case JVMTI_ERROR_CLASS_NOT_PREPARED -> "JVMTI_ERROR_CLASS_NOT_PREPARED";
		case JVMTI_ERROR_INVALID_METHODID -> "JVMTI_ERROR_INVALID_METHODID";
		case JVMTI_ERROR_INVALID_LOCATION -> "JVMTI_ERROR_INVALID_LOCATION";
		case JVMTI_ERROR_INVALID_FIELDID -> "JVMTI_ERROR_INVALID_FIELDID";
		case JVMTI_ERROR_INVALID_MODULE -> "JVMTI_ERROR_INVALID_MODULE";
		case JVMTI_ERROR_NO_MORE_FRAMES -> "JVMTI_ERROR_NO_MORE_FRAMES";
		case JVMTI_ERROR_OPAQUE_FRAME -> "JVMTI_ERROR_OPAQUE_FRAME";
		case JVMTI_ERROR_TYPE_MISMATCH -> "JVMTI_ERROR_TYPE_MISMATCH";
		case JVMTI_ERROR_INVALID_SLOT -> "JVMTI_ERROR_INVALID_SLOT";
		case JVMTI_ERROR_DUPLICATE -> "JVMTI_ERROR_DUPLICATE";
		case JVMTI_ERROR_NOT_FOUND -> "JVMTI_ERROR_NOT_FOUND";
		case JVMTI_ERROR_INVALID_MONITOR -> "JVMTI_ERROR_INVALID_MONITOR";
		case JVMTI_ERROR_NOT_MONITOR_OWNER -> "JVMTI_ERROR_NOT_MONITOR_OWNER";
		case JVMTI_ERROR_INTERRUPT -> "JVMTI_ERROR_INTERRUPT";
		case JVMTI_ERROR_INVALID_CLASS_FORMAT -> "JVMTI_ERROR_INVALID_CLASS_FORMAT";
		case JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION -> "JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION";
		case JVMTI_ERROR_FAILS_VERIFICATION -> "JVMTI_ERROR_FAILS_VERIFICATION";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED";
		case JVMTI_ERROR_INVALID_TYPESTATE -> "JVMTI_ERROR_INVALID_TYPESTATE";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED";
		case JVMTI_ERROR_UNSUPPORTED_VERSION -> "JVMTI_ERROR_UNSUPPORTED_VERSION";
		case JVMTI_ERROR_NAMES_DONT_MATCH -> "JVMTI_ERROR_NAMES_DONT_MATCH";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED";
		case JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED -> "JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED";
		case JVMTI_ERROR_UNSUPPORTED_OPERATION -> "JVMTI_ERROR_UNSUPPORTED_OPERATION";
		case JVMTI_ERROR_UNMODIFIABLE_CLASS -> "JVMTI_ERROR_UNMODIFIABLE_CLASS";
		case JVMTI_ERROR_UNMODIFIABLE_MODULE -> "JVMTI_ERROR_UNMODIFIABLE_MODULE";
		case JVMTI_ERROR_NOT_AVAILABLE -> "JVMTI_ERROR_NOT_AVAILABLE";
		case JVMTI_ERROR_MUST_POSSESS_CAPABILITY -> "JVMTI_ERROR_MUST_POSSESS_CAPABILITY";
		case JVMTI_ERROR_NULL_POINTER -> "JVMTI_ERROR_NULL_POINTER";
		case JVMTI_ERROR_ABSENT_INFORMATION -> "JVMTI_ERROR_ABSENT_INFORMATION";
		case JVMTI_ERROR_INVALID_EVENT_TYPE -> "JVMTI_ERROR_INVALID_EVENT_TYPE";
		case JVMTI_ERROR_ILLEGAL_ARGUMENT -> "JVMTI_ERROR_ILLEGAL_ARGUMENT";
		case JVMTI_ERROR_NATIVE_METHOD -> "JVMTI_ERROR_NATIVE_METHOD";
		case JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED -> "JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED";
		case JVMTI_ERROR_OUT_OF_MEMORY -> "JVMTI_ERROR_OUT_OF_MEMORY";
		case JVMTI_ERROR_ACCESS_DENIED -> "JVMTI_ERROR_ACCESS_DENIED";
		case JVMTI_ERROR_WRONG_PHASE -> "JVMTI_ERROR_WRONG_PHASE";
		case JVMTI_ERROR_INTERNAL -> "JVMTI_ERROR_INTERNAL";
		case JVMTI_ERROR_UNATTACHED_THREAD -> "JVMTI_ERROR_UNATTACHED_THREAD";
		case JVMTI_ERROR_INVALID_ENVIRONMENT -> "JVMTI_ERROR_INVALID_ENVIRONMENT";
		default -> "[UNKNOWN JVMTI ERROR]";
		};
	}
	
	public static int jvmtiVersion(int major, int minor, int micro) {
		if(minor >= 0x10000 || micro >= 0x100)
			throw new IllegalArgumentException("Invalid Java version");
		
		return 0x30000000 + (major * 0x10000) + ( minor * 0x100) + micro;
	}
	
	public static String getEnvVersionName(int version) {
		var versionName = switch(version & JVMTI_VERSION_MASK_INTERFACE_TYPE) {
		case JVMTI_VERSION_INTERFACE_JNI -> "JNI_VERSION";
		case JVMTI_VERSION_INTERFACE_JVMTI -> "JVMTI_VERSION";
		default -> "[UNKNOWN]";
		};
		
		var major = (version & JVMTI_VERSION_MASK_MAJOR) >> JVMTI_VERSION_SHIFT_MAJOR;
		var minor = (version & JVMTI_VERSION_MASK_MINOR) >> JVMTI_VERSION_SHIFT_MINOR;
		var micro = (version & JVMTI_VERSION_MASK_MICRO) >> JVMTI_VERSION_SHIFT_MICRO;
		
		String res = versionName + "_" + major;
		
		if(minor != 0 || micro != 0)
			res += "_" + minor;
		
		if(micro != 0)
			res += "_" + micro;
		
		return res;
	}

}